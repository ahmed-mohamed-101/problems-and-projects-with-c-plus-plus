// #include<iostream>
// using namespace std;

// void print_3n_plus_1(int n) {
// 	cout << n << " ";
// 	if (n == 1)
// 		return;

// 	if (n % 2 == 0)
// 		print_3n_plus_1(n / 2);
// 	else
// 		print_3n_plus_1(3 * n + 1);
// }

// int main() {
// 	print_3n_plus_1(6);

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// int length_3n_plus_1(int n) {
// 	if (n == 1)
// 		return 1;

// 	if (n % 2 == 0)
// 		return 1 + length_3n_plus_1(n / 2);

// 	return 1 + length_3n_plus_1(3 * n + 1);
// }
// // 6 3 10 5 16 8 4 2 1
// int main() {
// 	cout<<length_3n_plus_1(6);

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// int arr_max(int arr[], int len) {
// 	if (len == 1)
// 		return arr[0];

// 	int sub_result = arr_max(arr, len - 1);
// 	return max(sub_result, arr[len - 1]);
// }

// int main() {
// 	int arr[] = { 1, 8, 2, 10, 3 };

// 	cout << arr_max(arr, 5);

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// int arr_sum(int arr[], int len) {
// 	if (len == 1)
// 		return arr[0];

// 	int sub_result = arr_sum(arr, len - 1);
// 	return sub_result + arr[len - 1];
// }

// int main() {
// 	int arr[] = { 1, 8, 2, 10, 3 };

// 	cout << arr_sum(arr, 5);

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// double arr_average(double arr[], int len) {
// 	if (len == 1)
// 		return arr[0];

// 	double sub_result = arr_average(arr, len - 1);
// 	// Now this was average of len-1. So sum / (len-1)
// 	sub_result = sub_result * (len-1);

// 	return (sub_result + arr[len - 1] ) / len;
// }

// int main() {
// 	double arr[] = { 1, 8, 2, 10, 3 };

// 	cout << arr_average(arr, 5);

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// void array_increment(int arr[], int len) {
// 	if (len == 0)
// 		return;

// 	array_increment(arr, len - 1);
// 	arr[len-1] += len-1;
// }

// int main() {
// 	int arr[] = { 1, 8, 2, 10, 3 };

// 	array_increment(arr, 5);

// 	for (int i = 0; i < 5; ++i) {
// 		cout<<arr[i]<<" ";
// 	}

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// void accumulate_arr(int arr[], int len) {
// 	if (len == 1)
// 		return;

// 	accumulate_arr(arr, len - 1);
// 	arr[len-1] += arr[len-2];
// }

// int main() {
// 	int arr[] = { 1, 8, 2, 10, 3 };

// 	accumulate_arr(arr, 5);

// 	for (int i = 0; i < 5; ++i) {
// 		cout<<arr[i]<<" ";
// 	}

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// void left_max(int arr[], int len) {
// 	if (len == 1)
// 		return;

// 	left_max(arr, len - 1);
// 	arr[len-1] = max(arr[len-1], arr[len-2]);
// }

// int main() {
// 	int arr[] = { 1, 8, 2, 10, 3 };

// 	left_max(arr, 5);

// 	for (int i = 0; i < 5; ++i) {
// 		cout<<arr[i]<<" ";
// 	}

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// #include<iostream>
// using namespace std;

// void right_max(int arr[], int len) {
// 	if (len == 1)
// 		return;

// 	right_max(arr + 1, len-1);	// arr+1 is the a new array shifted. E.g. { 1, 8, 2, 10, 3 } => {8, 2, 10, 3 }
// 	arr[0] = max(arr[0], arr[1]);	// Then we only need to think about arr (0)
// }

// int main() {
// 	int arr[] = { 1, 8, 2, 10, 3 };

// 	right_max(arr, 5);

// 	for (int i = 0; i < 5; ++i) {
// 		cout<<arr[i]<<" ";
// 	}

// 	return 0;
// }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
